//

use crate::{position::Position, rope::Rope};

//

#[test]
fn test_example_one_steps() {
    let mut rope = Rope::<2>::default();

    // == Initial State ==

    // ......
    // ......
    // ......
    // ......
    // H.....  (H covers T, s)
    assert_eq!(&rope.knots, &[Position(0, 0); 2]);

    // == R 4 ==

    // ......
    // ......
    // ......
    // ......
    // TH....  (T covers s)
    rope.move_head_by(Position(1, 0));
    assert_eq!(&rope.knots, &[Position(1, 0), Position(0, 0)]);

    // ......
    // ......
    // ......
    // ......
    // sTH...
    rope.move_head_by(Position(1, 0));
    assert_eq!(&rope.knots, &[Position(2, 0), Position(1, 0)]);

    // ......
    // ......
    // ......
    // ......
    // s.TH..
    rope.move_head_by(Position(1, 0));
    assert_eq!(&rope.knots, &[Position(3, 0), Position(2, 0)]);

    // ......
    // ......
    // ......
    // ......
    // s..TH.
    rope.move_head_by(Position(1, 0));
    assert_eq!(&rope.knots, &[Position(4, 0), Position(3, 0)]);

    // == U 4 ==

    // ......
    // ......
    // ......
    // ....H.
    // s..T..
    rope.move_head_by(Position(0, 1));
    assert_eq!(&rope.knots, &[Position(4, 1), Position(3, 0)]);

    // ......
    // ......
    // ....H.
    // ....T.
    // s.....
    rope.move_head_by(Position(0, 1));
    assert_eq!(&rope.knots, &[Position(4, 2), Position(4, 1)]);

    // ......
    // ....H.
    // ....T.
    // ......
    // s.....
    rope.move_head_by(Position(0, 1));
    assert_eq!(&rope.knots, &[Position(4, 3), Position(4, 2)]);

    // ....H.
    // ....T.
    // ......
    // ......
    // s.....
    rope.move_head_by(Position(0, 1));
    assert_eq!(&rope.knots, &[Position(4, 4), Position(4, 3)]);

    // == L 3 ==

    // ...H..
    // ....T.
    // ......
    // ......
    // s.....
    rope.move_head_by(Position(-1, 0));
    assert_eq!(&rope.knots, &[Position(3, 4), Position(4, 3)]);

    // ..HT..
    // ......
    // ......
    // ......
    // s.....
    rope.move_head_by(Position(-1, 0));
    assert_eq!(&rope.knots, &[Position(2, 4), Position(3, 4)]);

    // .HT...
    // ......
    // ......
    // ......
    // s.....
    rope.move_head_by(Position(-1, 0));
    assert_eq!(&rope.knots, &[Position(1, 4), Position(2, 4)]);

    // == D 1 ==

    // ..T...
    // .H....
    // ......
    // ......
    // s.....
    rope.move_head_by(Position(0, -1));
    assert_eq!(&rope.knots, &[Position(1, 3), Position(2, 4)]);

    // == R 4 ==

    // ..T...
    // ..H...
    // ......
    // ......
    // s.....
    rope.move_head_by(Position(1, 0));
    assert_eq!(&rope.knots, &[Position(2, 3), Position(2, 4)]);

    // ..T...
    // ...H..
    // ......
    // ......
    // s.....
    rope.move_head_by(Position(1, 0));
    assert_eq!(&rope.knots, &[Position(3, 3), Position(2, 4)]);

    // ......
    // ...TH.
    // ......
    // ......
    // s.....
    rope.move_head_by(Position(1, 0));
    assert_eq!(&rope.knots, &[Position(4, 3), Position(3, 3)]);

    // ......
    // ....TH
    // ......
    // ......
    // s.....
    rope.move_head_by(Position(1, 0));
    assert_eq!(&rope.knots, &[Position(5, 3), Position(4, 3)]);

    // == D 1 ==

    // ......
    // ....T.
    // .....H
    // ......
    // s.....
    rope.move_head_by(Position(0, -1));
    assert_eq!(&rope.knots, &[Position(5, 2), Position(4, 3)]);

    // == L 5 ==

    // ......
    // ....T.
    // ....H.
    // ......
    // s.....
    rope.move_head_by(Position(-1, 0));
    assert_eq!(&rope.knots, &[Position(4, 2), Position(4, 3)]);

    // ......
    // ....T.
    // ...H..
    // ......
    // s.....
    rope.move_head_by(Position(-1, 0));
    assert_eq!(&rope.knots, &[Position(3, 2), Position(4, 3)]);

    // ......
    // ......
    // ..HT..
    // ......
    // s.....
    rope.move_head_by(Position(-1, 0));
    assert_eq!(&rope.knots, &[Position(2, 2), Position(3, 2)]);

    // ......
    // ......
    // .HT...
    // ......
    // s.....
    rope.move_head_by(Position(-1, 0));
    assert_eq!(&rope.knots, &[Position(1, 2), Position(2, 2)]);

    // ......
    // ......
    // HT....
    // ......
    // s.....
    rope.move_head_by(Position(-1, 0));
    assert_eq!(&rope.knots, &[Position(0, 2), Position(1, 2)]);

    // == R 2 ==

    // ......
    // ......
    // .H....  (H covers T)
    // ......
    // s.....
    rope.move_head_by(Position(1, 0));
    assert_eq!(&rope.knots, &[Position(1, 2), Position(1, 2)]);

    // ......
    // ......
    // .TH...
    // ......
    // s.....
    rope.move_head_by(Position(1, 0));
    assert_eq!(&rope.knots, &[Position(2, 2), Position(1, 2)]);
}
